import React, { useEffect, useState } from 'react';
import { Table, Spinner, Alert, Form, Modal, Button } from 'react-bootstrap';
import axios from '../../../../Util/AxiosConfig';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register( CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend );


function DoctorSalaryTable({ tabActive }) {
    const [salaries, setSalaries] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [month, setMonth] = useState("");
    const [showModal, setShowModal] = useState(false);
    const [detailData, setDetailData] = useState([]);
    const [selectedDoctor, setSelectedDoctor] = useState(null);
    const [revenueStats, setRevenueStats] = useState({
        totalCommission: 0,
        grossRevenue: 0,
        totalSalary: 0,
        netRevenue: 0,
    });

    const formatMonth = (month) => {
        if (month) {
            const [year, monthNumber] = month.split("-");
            return new Date(`${year}-${monthNumber}-01T00:00:00`);
        }
        return null;
    };

    const fetchSalaries = async () => {
        if (tabActive !== "salary") return

        setLoading(true);
        setError(null);
        try {
            const formattedMonth = formatMonth(month);
            const params = formattedMonth ? { month: formattedMonth.toISOString() } : {};
            const response = await axios.get("/doctors/salary/monthly", { params });

            // ∆Øu ti√™n l·∫•y totalSalary t·ª´ backend n·∫øu c√≥, n·∫øu kh√¥ng th√¨ t√≠nh th·ªß c√¥ng
            const mapped = response.data.map(item => ({
                ...item,
                totalSalary: item.totalSalary ?? (item.baseSalary + item.bonus + item.commission)
            }));
            setSalaries(mapped);
        } catch (err) {
            setError("L·ªói khi t·∫£i d·ªØ li·ªáu b·∫£ng l∆∞∆°ng.");
        } finally {
            setLoading(false);
        }
    };

    const fetchSalarySummary = async () => {
        try {
            const formattedMonth = formatMonth(month);
            const params = formattedMonth ? { month: formattedMonth.toISOString() } : {};
            const response = await axios.get("/doctors/salary-summary", { params });

            setRevenueStats(response.data); // G√°n tr·ª±c ti·∫øp t·ª´ backend
        } catch (err) {
            console.error("L·ªói khi t·∫£i t·ªïng k·∫øt l∆∞∆°ng t·ª´ backend:", err);
        }
    };


    const fetchSalaryDetails = async (doctorId) => {
        if (tabActive !== "salary") return
        
        try {
            const formattedMonth = formatMonth(month);
            const params = {
                doctorId,
                month: formattedMonth ? formattedMonth.toISOString() : null
            };
            const response = await axios.get('/doctors/salary/details', { params });

            // N·∫øu backend tr·∫£ ƒë√∫ng fullName, totalSalary, baseSalary, bonus => gi·ªØ nguy√™n
            setSelectedDoctor({
                ...selectedDoctor,           // Gi·ªØ fullName t·ª´ b·∫£ng ch√≠nh
                ...response.data             // Ghi ƒë√® b·∫±ng d·ªØ li·ªáu chi ti·∫øt
            });

            if (Array.isArray(response.data.details)) {
                setDetailData(response.data.details);
            } else {
                setDetailData([]);
            }

            setShowModal(true);
        } catch (err) {
            alert("L·ªói khi t·∫£i d·ªØ li·ªáu chi ti·∫øt.");
        }
    };

    useEffect(() => {
        fetchSalaries();
        fetchSalarySummary();
    }, [month]);

    const handleClose = () => {
        setShowModal(false);
        setDetailData([]);
    };

    return (
        <div className='py-4'>
            <h5 className="mb-4">B·∫£ng L∆∞∆°ng B√°c Sƒ© Theo Th√°ng</h5>

            <Form.Group className="mb-3" controlId="monthPicker">
                <Form.Label>Ch·ªçn th√°ng:</Form.Label>
                <Form.Control
                    type="month"
                    value={month}
                    onChange={(e) => setMonth(e.target.value)}
                />
            </Form.Group>

            {loading && <Spinner animation="border" />}
            {error && <Alert variant="danger">{error}</Alert>}

            {!loading && salaries.length > 0 && (
            <>
                {revenueStats && (
                    <div className="d-flex flex-wrap gap-3 mb-4">
  {/* T·ªïng k·∫øt th√°ng */}
  <div className="card flex-fill" style={{ minWidth: '300px', flex: '1' }}>
    <div className="card-body p-3">
      <h6 className="card-title mb-3">üìä <strong>T·ªïng k·∫øt th√°ng:</strong></h6>
      <p className="mb-1"><strong>T·ªïng hoa h·ªìng:</strong> {revenueStats.totalCommission.toLocaleString()} ƒë</p>
      <p className="mb-1"><strong>T·ªïng l∆∞∆°ng b√°c sƒ©:</strong> {revenueStats.totalSalary.toLocaleString()} ƒë</p>
      <p className="mb-1"><strong>T·ªïng doanh thu (∆∞·ªõc t√≠nh):</strong> {revenueStats.grossRevenue.toLocaleString()} ƒë</p>
      <p className="mb-0"><strong>Doanh thu r√≤ng:</strong> {revenueStats.netRevenue.toLocaleString()} ƒë</p>
    </div>
  </div>

  {/* Bi·ªÉu ƒë·ªì */}
  <div className="card flex-fill" style={{ minWidth: '300px', flex: '1' }}>
    <div className="card-body p-3" style={{ height: '250px' }}>
      <Bar
        data={{
          labels: ['T·ªïng hoa h·ªìng', 'T·ªïng l∆∞∆°ng b√°c sƒ©', 'T·ªïng doanh thu', 'Doanh thu r√≤ng'],
          datasets: [
            {
              label: 'VNƒê',
              data: [
                revenueStats.totalCommission,
                revenueStats.totalSalary,
                revenueStats.grossRevenue,
                revenueStats.netRevenue
              ],
              backgroundColor: ['#36a2eb', '#ff6384', '#4bc0c0', '#9966ff']
            }
          ]
        }}
        options={{
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            title: {
              display: true,
              text: 'Bi·ªÉu ƒë·ªì doanh thu th√°ng'
            }
          },
          scales: {
            y: {
              ticks: {
                callback: function (value) {
                  return value.toLocaleString() + ' ƒë';
                }
              }
            }
          }
        }}
      />
    </div>
  </div>
</div>

                )}

                <Table striped bordered hover responsive>
                    <thead>
                        <tr>
                            <th>H·ªç t√™n</th>
                            <th>Chuy√™n khoa</th>
                            <th>L∆∞∆°ng c·ª©ng</th>
                            <th>Hoa h·ªìng</th>
                            <th>Th∆∞·ªüng</th>
                            <th>T·ªïng l∆∞∆°ng</th>
                            <th>H√†nh ƒë·ªông</th>
                        </tr>
                    </thead>
                    <tbody>
                        {salaries.map((item, idx) => (
                            <tr key={idx}>
                                <td>{item.doctorName}</td>
                                <td>{item.specialty}</td>
                                <td>{item.baseSalary?.toLocaleString()} ƒë</td>
                                <td>{item.commission?.toLocaleString()} ƒë</td>
                                <td>{item.bonus?.toLocaleString()} ƒë</td>
                                <td>{item.totalSalary?.toLocaleString()} ƒë</td>
                                <td>
                                    <Button
                                        variant="info"
                                        size="sm"
                                        onClick={() => {
                                            setSelectedDoctor(item); // L∆∞u fullName ƒë·ªÉ hi·ªÉn th·ªã tr∆∞·ªõc
                                            fetchSalaryDetails(item.doctorId);
                                        }}
                                    >
                                        Chi ti·∫øt
                                    </Button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </Table>
            </>
        )}

            {/* Modal Chi ti·∫øt */}
            <Modal show={showModal} onHide={handleClose} size="lg">
                <Modal.Header closeButton>
                    <Modal.Title>
                        Chi ti·∫øt l∆∞∆°ng b√°c sƒ©: {selectedDoctor?.doctorName || selectedDoctor?.fullName}
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {Array.isArray(detailData) && detailData.length > 0 ? (
                        <>
                            <Table striped bordered hover responsive>
                                <thead>
                                    <tr>
                                        <th>B·ªánh nh√¢n</th>
                                        <th>D·ªãch v·ª•</th>
                                        <th>Ng√†y kh√°m</th>
                                        <th>Gi√° d·ªãch v·ª•</th>
                                        <th>Hoa h·ªìng</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {detailData.map((item, idx) => (
                                        <tr key={idx}>
                                            <td>{item.patientName}</td>
                                            <td>{item.serviceName}</td>
                                            <td>{new Date(item.appointmentDate).toLocaleDateString()}</td>
                                            <td>{item.servicePrice?.toLocaleString()} ƒë</td>
                                            <td>{item.commission?.toLocaleString()} ƒë</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </Table>

                            {/* Hi·ªÉn th·ªã bonus v√† t·ªïng l∆∞∆°ng */}
                            <div className="mt-3">
                                <h6>T·ªïng k·∫øt:</h6>
                                <p><strong>L∆∞∆°ng c·ª©ng:</strong> {selectedDoctor?.baseSalary?.toLocaleString()} ƒë</p>
                                <p><strong>Th∆∞·ªüng:</strong> {selectedDoctor?.bonus?.toLocaleString()} ƒë</p>
                                <p><strong>l∆∞∆°ng kh√°m d·ªãch v·ª•:</strong> {selectedDoctor?.commissionTotal?.toLocaleString()} ƒë</p>
                                <p><strong>T·ªïng l∆∞∆°ng:</strong> {selectedDoctor?.totalSalary?.toLocaleString()} ƒë</p>
                            </div>
                        </>
                    ) : (
                        <p>Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt.</p>
                    )}
                </Modal.Body>

                <Modal.Footer>
                    <Button variant="secondary" onClick={handleClose}>
                        ƒê√≥ng
                    </Button>
                </Modal.Footer>
            </Modal>
        </div>
    );
}

export default DoctorSalaryTable;
